"""
Django settings for chore_tracker project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# chore_tracker/settings.py

import os
from pathlib import Path
from dotenv import load_dotenv # Load environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file located at the project root
# This is where FIREBASE_SERVICE_ACCOUNT_KEY_PATH and DB credentials should be defined
dotenv_path = BASE_DIR / '.env'
load_dotenv(dotenv_path=dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Generate a strong secret key for production
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-dev-postgres') # Use env var or fallback

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True' # Default to True for dev, set to False in prod env

# Define allowed hosts. Use environment variable for production.
# Example: ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
ALLOWED_HOSTS_STR = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(',') if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth', # Django's built-in auth (can be useful even with Firebase)
    'django.contrib.contenttypes',
    'django.contrib.sessions', # Needed for session management
    'django.contrib.messages', # Needed for flash messages
    'django.contrib.staticfiles',

    # Your apps
    'chores', # Add your 'chores' app here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Handles sessions
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', # CSRF protection for forms
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Django auth middleware
    'django.contrib.messages.middleware.MessageMiddleware', # Handles messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chore_tracker.urls' # Points to your main urls.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Add the project-level 'templates' directory
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True, # Allows Django to find templates inside app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chore_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# --- PostgreSQL Configuration ---
# Uses environment variables defined in your .env file
# Example .env entries:
# DB_NAME=chore_tracker_db
# DB_USER=chore_tracker_user
# DB_PASSWORD=your_secure_password
# DB_HOST=localhost  # Or your DB host IP/domain
# DB_PORT=5432       # Default PostgreSQL port

DB_NAME = os.getenv('DB_NAME', 'chore_tracker_dev_db') # Default name for safety
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_HOST = os.getenv('DB_HOST', 'localhost') # Default to localhost
DB_PORT = os.getenv('DB_PORT', '5432')      # Default to 5432

# Check if essential DB credentials are provided (optional but good practice)
if not all([DB_USER, DB_PASSWORD, DB_NAME]):
    print("WARNING: Database credentials (DB_USER, DB_PASSWORD, DB_NAME) not fully set in environment variables. Using fallback SQLite.")
    # Fallback to SQLite if PostgreSQL credentials aren't set
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db_fallback.sqlite3',
            'WARNING': 'Using SQLite fallback because PostgreSQL credentials were not found in .env'
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql', # Use PostgreSQL engine
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
            # Optional: Add connection options if needed
            # 'OPTIONS': {
            #     'sslmode': 'require', # Example for requiring SSL
            # },
        }
    }


# Password validation (For Django's internal auth if used, not Firebase)
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC' # Or your local timezone e.g., 'America/Chicago'

USE_I18N = True

USE_TZ = True # Use timezone-aware datetimes


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/' # URL prefix for static files

# Directory where `collectstatic` will gather static files for deployment.
# Set this to a path outside your source code directory in production.
STATIC_ROOT = BASE_DIR / 'staticfiles_collected'

# Additional locations the staticfiles app will traverse to find static files.
# Add your project-level 'static' directory here.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session Settings (Using database-backed sessions by default)
# This will now use your PostgreSQL database if configured.
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600 # 2 weeks in seconds (optional)
SESSION_SAVE_EVERY_REQUEST = True # Save session on every request (optional)
# SESSION_COOKIE_SECURE = not DEBUG # Set to True in production over HTTPS
# CSRF_COOKIE_SECURE = not DEBUG # Set to True in production over HTTPS

# Message Storage (Using session-based storage is common)
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# --- Custom Settings ---
# No specific custom settings needed here for Firebase connection,
# as that's handled in firebase_config.py using environment variables.

# --- Logging Configuration (Optional but Recommended) ---
# Basic example, customize as needed
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': { # Added formatters for more detail
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Use simple format for console
        },
        # Add file handler for production if desired
        # 'file': {
        #     'level': 'WARNING',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'django_warnings.log',
        #     'formatter': 'verbose', # Use verbose format for file
        # },
    },
    'root': {
        'handlers': ['console'], # Add 'file' here in production
        'level': 'INFO', # Adjust level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.db.backends': { # Specific logger for database queries (can be noisy)
            'handlers': ['console'],
            'level': 'WARNING', # Set to INFO or DEBUG to see SQL queries
            'propagate': False,
        },
         # Logger for your 'chores' app (matches logger name in views.py)
        'chores': {
            'handlers': ['console'],
            'level': 'INFO', # Or DEBUG for more detail
            'propagate': True, # Propagate to root logger
        }
    },
}

